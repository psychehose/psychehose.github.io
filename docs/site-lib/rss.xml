<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><parsererror xmlns="http://www.w3.org/1999/xhtml" style="display: block; white-space: pre; border: 2px solid #c77; padding: 0 1em 0 1em; margin: 1em; background-color: #fdd; color: black"><h3>This page contains the following errors:</h3><div style="font-family:monospace;font-size:12px">error on line 29 at column 197: Invalid bytes in character encoding
</div><h3>Below is a rendering of the page up to the first error.</h3></parsererror><channel><title><![CDATA[psychehose.github.io]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>site-lib/media/favicon.png</url><title>psychehose.github.io</title><link/></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 16 Mar 2025 13:48:53 GMT</lastBuildDate><atom:link href="site-lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 16 Mar 2025 13:46:29 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[ Home]]></title><description><![CDATA[ 금융공학과 소프트웨어공학을 전공하며 쌓은 수학적, 논리적 사고를 바탕으로 iOS 개발을 시작했습니다. 현재는 Android / iOS SDK 개발과 언리얼엔진 플러그인을 개발을 하고 있습니다.
시스템 설계와 구현에 강점이 있으며 모던 C++을 이용해서 크로스 플랫폼을 타겟으로 하는 물리 라이브러리를 개발하고 있습니다.
Swift Objective C RxSwift
Java Android
C++ CMake
Unreal Engine
Git Perforce Helix Core Game Engine
Graphics
OpenCV
Robotics 안드로이드 / iOS 네이티브 라이브러리를 개발하고 이를 언리얼엔진에서 사용할 수 있도록 C++ 플러그인을 제작하여 제공 물리 라이브러리 크로스플랫폼 지원 및 C++ 현대화 UDN과 Github을 이용한 모바일 플랫폼 한정 엔진 이슈 트러블 슈팅 담당 언리얼엔진 클라이언트 개발 및 언리얼 인사이트를 활용한 게임 최적화 경험 브랜치 머지 전략 수립과 코드 리뷰 문화 도입 등을 통해 개발 문화를 정착 핀테크 기업에서 iOS 개발자로 근무하며 블록딜 및 비상장주식 플랫폼 개발을 주도 펀드고 앱 : 기획/디자인 단계부터 참여하며 모든 피쳐 개발을 담당 제이스톡 앱 : Modular Architecture를 바탕으로 비상장주식 거래 플랫폼을 개발 회사 내 프로젝트를 위한 인앱결제, 네트워크, 유저 정보, OAuth 모듈을 개발 및 CI/CD 배포 환경을 구축 Role - iOS Developer lead
20th SOPT 앱잼(3주 장기 해커톤) Project Init ~ AppStore 배포 종료 (22.11 ~ 24.07)
MVVM, RxSwift, ReactorKit, xcframework, fastlane
SPM을 이용한 일부 부분 모듈화
iOS 4명 - 기획 1명 - 디자인 1명 - 서버 2명 - 안드로이드 4명 Role - iOS Developer
무중력지대 씨앗프로젝트
Project Init ~ AppStore 배포 종료(20.09 ~ 22.08)
MVVM, RxSwift, Moya, `Socket' iOS 3명 - 기획 2명 - 디자인 1명 - 서버 2명
<a data-tooltip-position="top" aria-label="https://github.com/bookmaru/MARU-iOS" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/bookmaru/MARU-iOS" target="_self">GitHub</a> 16th SOPT 앱잼 (3주 장기 해커톤) Project Init ~ AppStore 배포 종료 (20.08 ~ 23.04)
MVC , YPImagePicker …
iOS 5명 - 기획 2명 - 디자인 1명 - 서버 1명 - 안드로이드 3명
MAU: 225명
전체 유저: 1,295명 / 고양이: 1,523마리 / 리뷰: 11,169개
아주대학교 금융공학과 전공, 소프트웨어학과 복수전공
SOPT 창업동아리 26th iOS 파트 수료2023 let us: Go! Summer 찍먹톤 최우수상 (2023.06)
SOPT 창업동아리 20th 앱잼 대상 (2022.08)
SOPT 창업동아리 16th 앱잼 최우수상 (2020.08)Glitch Hackathon - Near Rust SDK 사용 Project (2023.05)
<br>Email: <a data-tooltip-position="top" aria-label="mailto:psychehose@gmail.com" rel="noopener nofollow" class="external-link" href=".html" target="_self">psychehose@gmail.com</a>
<br>GitHub: <a data-tooltip-position="top" aria-label="https://github.com/psychehose" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/psychehose" target="_self">psychehose</a>
]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Sun, 16 Mar 2025 13:41:10 GMT</pubDate></item><item><title><![CDATA[CMake]]></title><description/></item><item><title><![CDATA[152. Maximum Product Subarray]]></title><description><![CDATA[<a href=".?query=tag:algo" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#algo">#algo</a> <a href=".?query=tag:medium" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#medium">#medium</a> <a href=".?query=tag:blind75" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#blind75">#blind75</a> Given an integer array&nbsp;nums, find a&nbsp;subarray&nbsp;that has the largest product, and return&nbsp;the product.The test cases are generated so that the answer will fit in a&nbsp;32-bit&nbsp;integer.Example 1:Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.Example 2:Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.Constraints:
1 &lt;= nums.length &lt;= 2 * 104
-10 &lt;= nums[i] &lt;= 10
The product of any subarray of&nbsp;nums&nbsp;is&nbsp;guaranteed&nbsp;to fit in a&nbsp;32-bit&nbsp;integer.
#include &lt;algorithm&gt;
#include &lt;vector&gt; using namespace std; class Solution {
public: int maxProduct(vector&lt;int&gt; &amp;nums) { int res = *std::max_element(nums.begin(), nums.end()); int curMin = 1; int curMax = 1; for (auto n : nums) { if (n == 0) { curMin = 1; curMax = 1; continue; } int tempMax = curMax * n; int tempMin = curMin * n; curMax = max(tempMin, tempMax); curMax = max(curMax, n); curMin = min(tempMin, tempMax); curMin = min(curMin, n); res = max(curMax, res); } return res; }
};
vector를 순회한다.
0을 제외한 아이템은 곱해서 min, max를 구한다.
0인 경우는 min max를 1로 초기화 한다. (다음 아이템 반영)
example. [2. -5, -2]iter = 2
min: 2, max: 2, n = 2 iter = -5
min: -10, max: -10, n = -5
최종: min: -10, max: -5 iter = -2
min: 10, max: 20, n = -2
최종: min: -2, max: 20 result = 20.
]]></description><link>algorithm/leetcode/152.-maximum-product-subarray.html</link><guid isPermaLink="false">Algorithm/LeetCode/152. Maximum Product Subarray.md</guid><pubDate>Sun, 02 Feb 2025 06:07:54 GMT</pubDate></item><item><title><![CDATA[2. 생성자]]></title><description><![CDATA[class Employee { std::string name; int age; std::string position; // 직책 (이름) int rank; // 순위 (값이 클 수록 높은 순위) public: Employee(std::string name, int age, std::string position, int rank) : name(name), age(age), position(position), rank(rank) {} // 복사 생성자 Employee(const Employee&amp; employee) { name = employee.name; age = employee.age; position = employee.position; rank = employee.rank; } // 디폴트 생성자 Employee() {} void print_info() { std::cout &lt;&lt; name &lt;&lt; " (" &lt;&lt; position &lt;&lt; " , " &lt;&lt; age &lt;&lt; ") ==&gt; " &lt;&lt; calculate_pay() &lt;&lt; "만원" &lt;&lt; std::endl; } int calculate_pay() { return 200 + rank * 50; }
}; Q1. b와 c의 메모리주소는 a와 비교하면 어떻게 되어있는가?
Employee* a = new Employee(); // 객체 a 생성 (디폴트 생성자 호출) Employee* b = new Employee(*a); // 객체 b 생성 (복사 생성자 호출)
Employee* c = a; b는 복사생성자를 호출했기 때문에 a와 b의 메모리 주소는 다르다. 그러나 c는 a의 주소값을 대입했기 때문에 메모리 주소가 같다.Q2. 두 생성자의 차이점은 무엇인가?Employee(std::string name, int age, std::string position, int rank) : name(name), age(age), position(position), rank(rank) {} // 생성자 본문에서 초기화하는 생성자 Employee(std::string name, int age, std::string position, int rank) { this-&gt;name = name; this-&gt;age = age; this-&gt;position = position; this-&gt;rank = rank; }
첫번째 생성자는 멤버 변수가 생성될 때 해당하는 값으로 초기화 하고 두번째 생성자는 멤버 변수가 기본 생성자로 한 번 초기화된 후 다시 값이 대입된다. 그래서 비효율적이다.아래 코드에서 "복사 생성"은 몇번 호출 되는가
class A { int x; public: A(int c) : x(c) {} A(const A&amp; a) { x = a.x; std::cout &lt;&lt; "복사 생성" &lt;&lt; std::endl; }
}; class B { A a; public: B(int c) : a(c) {} B(const B&amp; b) : a(b.a) {} A get_A() { A temp(a); return temp; }
}; int main() { B b(10); std::cout &lt;&lt; "---------" &lt;&lt; std::endl; A a1 = b.get_A();
}
Copy Elision(복사 생략) 중 Return Optimization왜냐하면 어떤 함수가 함수 내에서 생성한 객체를 리턴 한다면, 굳이 그걸 그냥 사용하면 되지 이를 복사 생성을 또할 필요가 없기 때문
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://modoocode.com/135" target="_self">https://modoocode.com/135</a>
]]></description><link>cpp/basic/2.-생성자.html</link><guid isPermaLink="false">CPP/Basic/2. 생성자.md</guid><pubDate>Sun, 02 Feb 2025 04:26:38 GMT</pubDate></item><item><title><![CDATA[3. Overloading]]></title><description><![CDATA[#include &lt;iostream&gt; class Complex { private: double real, img; double get_number(const char* str, int from, int to) const; public: Complex(double real, double** img) : real(real), img(img) { } Complex(const Complex&amp; c) { real = c.real; img = c.img ; } Complex(const char* str); Complex operator+(const Complex&amp; c) const; Complex operator-(const Complex&amp; c) const; Complex operator*(const Complex&amp; c) const; Complex operator/(const Complex&amp; c) const; Complex&amp; operator=(const Complex&amp; c); Complex&amp; operator+=(const Complex&amp; c); Complex&amp; operator-=(const Complex&amp; c); Complex&amp; operator=(const Complex&amp; c); Complex&amp; operator/=(const Complex&amp; c); void println() { std::cout &lt;&lt; "( " &lt;&lt; real &lt;&lt; " , " &lt;&lt; img &lt;&lt; " ) " &lt;&lt; std::endl; } }; Complex Complex::operator+(const Complex&amp; c) const { Complex temp(real + c.real, img + c.img); return temp;
} Complex Complex::operator-(const Complex&amp; c) const { Complex temp(real - c.real, img - c.img); return temp;
} Complex Complex::operator*(const Complex&amp; c) const { Complex temp(real * c.real - img * c.img, real * c.img + img * c.real); return temp;
} Complex Complex::operator/(const Complex&amp; c) const { Complex temp( (real * c.real + img * c.img) / (c.real * c.real + c.img * c.img), (img * c.real - real * c.img) / (c.real * c.real + c.img * c.img)); return temp;
} Complex&amp; Complex::operator=(const Complex&amp; c) { real = c.real; img = c.img; return *this; } Complex&amp; Complex::operator+=(const Complex&amp; c) { (*this) = (*this) + c; return *this; } Complex&amp; Complex::operator-=(const Complex&amp; c) { (*this) = (*this) - c; return *this; } Complex&amp; Complex::operator*=(const Complex&amp; c) { (*this) = (*this) * c; return *this; } Complex&amp; Complex::operator/=(const Complex&amp; c) { (*this) = (*this) / c; return *this; } Complex::Complex(const char* str) { int begin = 0, end = strlen(str); img = 0.0; real = 0.0; // 먼저 가장 기준이 되는 'i' 의 위치를 찾는다. int pos_i = -1; for (int i = 0; i != end; i++) { if (str[i] == 'i') { pos_i = i; break; } } // 만일 'i' 가 없다면 이 수는 실수 뿐이다. if (pos_i == -1) { real = get_number(str, begin, end - 1); return; } // 만일 'i' 가 있다면, 실수부와 허수부를 나누어서 처리하면 된다. real = get_number(str, begin, pos_i - 1); img = get_number(str, pos_i + 1, end - 1); if (pos_i &gt;= 1 &amp;&amp; str[pos_i - 1] == '-') img *= -1.0;
} double Complex::get_number(const char *str, int from, int to) const { bool minus = false; if (from &gt; to) return 0; if (str[from] == '-') minus = true; if (str[from] == '-' || str[from] == '+') from++; double** num = 0.0; double** decimal = 1.0; bool integer_part = true; for (int i = from; i &lt;= to; i++) { if (isdigit(str[i]) &amp;&amp; integer_part) { num *= 10.0; num += (str[i] - '0'); } else if (str[i] == '.') integer_part = false; else if (isdigit(str[i]) &amp;&amp; !integer_part) { decimal /= 10.0; num += ((str[i] - '0') * decimal); } else // 그 이외의 이상한 문자들이 올 경우 break; } if (minus) num *= -1.0; return num;
}
int main() { Complex a(0, 0); a = a + "-1.1 + i3.923"; a.println(); a = a - "1.2 -i1.823"; a.println(); a = a * "2.3+i22"; a.println(); a = a / "-12+i55"; a.println(); } Complex a = b + c + b;를 고려 했을 때 (b.plus(c)).plus(b) 가 되므로 -&gt; (b + c) + (b + c)가 되어버림
그래서 사칙연산에는 주소값을 리턴하지 않는다.전자는 복사생성자, 후자는 생성 후 대입연산자 여기에서는 얕은 복사가 일어난다.Complex operator+(const char* str) const;
Complex operator-(const char* str) const;
Complex operator*(const char* str) const;
Complex operator/(const char* str) const; Complex Complex::operator+(const char* str) const { Complex temp(str); return (*this) + temp;
} Complex Complex::operator-(const char* str) const { Complex temp(str); return (*this) - temp;
} Complex Complex::operator*(const char* str) const { Complex temp(str); return (*this) * temp;
} Complex Complex::operator/(const char* str) const { Complex temp(str); return (*this) - temp;
}
컴파일러는 문자열 리터럴로부터&nbsp;const Complex&nbsp;타입의 객체를 새롭게 생성할 수 있다.a = a + "-1.1 + i3.923"; 를 a = a.operator+("-1.1 + i3.923")로
그리고 이것을 a = a.operator+(Complex("-1.1 + i3.923")); 변환할 수 있다.그러나 a = "-1.1 + i3.923" + a;는 컴파일 실패한다. 변환할 수 없는 형태이기 때문이다.friend 키워드는 클래스 내부에서 다른 클래스나 함수를 friend로 정의할 수 있음.friend로 정의 되면 원래 클래스의 private로 정의된 변수, 함수들에 접근 가능lass A { private: void private_func() {} int private_num; // B 는 A 의 친구! friend class B; // func 은 A 의 친구! friend void func();
}; class B { public: void b() { A a; // 비록 private 함수의 필드들이지만 친구이기 때문에 접근 가능하다. a.private_func(); a.private_num = 2; }
}; void func() { A a; // 비록 private 함수의 필드들이지만 위와 마찬가지로 친구이기 때문에 접근 // 가능하다. a.private_func(); a.private_num = 2;
} int main() {} <a rel="noopener nofollow" class="external-link is-unresolved" href="https://modoocode.com/135" target="_self">https://modoocode.com/135</a>
]]></description><link>cpp/basic/3.-overloading.html</link><guid isPermaLink="false">CPP/Basic/3. Overloading.md</guid><pubDate>Sun, 02 Feb 2025 04:26:35 GMT</pubDate></item><item><title><![CDATA[Helix core,  Helix Swarm 구성]]></title><description><![CDATA[
저장소 설정
sudo tee /etc/yum.repos.d/perforce.repo &lt;&lt; 'EOF'
[perforce]
name=Perforce
baseurl=https://package.perforce.com/yum/rhel/9/x86_64
enabled=1
gpgcheck=1
gpgkey=https://package.perforce.com/perforce.pubkey
EOF 공개키 등록
sudo rpm --import https://package.perforce.com/perforce.pubkey 저장소 확인
# 저장소가 제대로 등록되었는지 확인
dnf repolist | grep perforce
# 패키지 검색이 되는지 확인
dnf search helix
# 패키지목록 초기화 하고 다시 받기
sudo dnf clean all
sudo dnf makecache
sudo dnf update Helix Core 서버 설치 (p4d) sudo dnf install helix-p4d p4d 초기 설정
sudo /opt/perforce/sbin/configure-helix-p4d.sh
export P4CHARSET=utf8 # 텍스트 인코딩
master가 config할 때 정한 이름이였던 거 같음 P4 설정 파일 경로: /etc/perforce/p4dctl.conf.d/master.conf P4 루트 디렉토리: /opt/perforce/servers/master/root 서버중지 - sudo systemctl stop p4d 또는 sudo -u perforce p4dctl stop master 서버 재시작 - sudo systemctl restart p4d 또는 sudo -u perforce p4dctl restart master 부팅 시 자동 시작 설정: sudo systemctl enable p4d aws인 경우 인바운드 추가해서 1666 포트 추가로 열기 Swram 필수 패키지 설치
sudo dnf install httpd php php-xml php-mbstring php-json php-gd php-curl Apache 웹 서버 활성화
sudo systemctl enable httpd
sudo systemctl start httpd Swarm 설치
sudo dnf install helix-swarm Swarm 초기설정
sudo /opt/perforce/swarm/bin/configure-swarm.sh post installation 설정 (거의 꼭 해야함)
<a rel="noopener nofollow" class="external-link is-unresolved" href="https://help.perforce.com/helix-core/helix-swarm/swarm/current/Content/Swarm/setup.post.html#Post-install_configuration_options" target="_self">https://help.perforce.com/helix-core/helix-swarm/swarm/current/Content/Swarm/setup.post.html#Post-install_configuration_options</a>p4 configure set filetype.bypasslock=1 #exclusive lock 핸들링
p4 configure show filetype.bypasslock
]]></description><link>infra/helix-core,-helix-swarm-구성.html</link><guid isPermaLink="false">Infra/Helix core,  Helix Swarm 구성.md</guid><pubDate>Fri, 24 Jan 2025 07:45:17 GMT</pubDate></item></channel></rss>